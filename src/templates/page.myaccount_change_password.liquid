{% if customer %}
    {% include 'assign-locale-prefix' %}
    {% assign customer_info = customer.metafields.data.personal %}
    <div class="page_change-password" data-page_border>
        <div class="container">
            <div class="section-header text-center">
                <h1>{{ page.title }}</h1>
                <div class="rte">
                    {{ page.content }}
                </div>
            </div>
            <form action="#" method="post"
                data-action="change-pwd" class="form-vertical">
                <input type="hidden" name="member_id" value="">
                <div class="row justify-content-center">
                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="old-password">{{ 'customer.account_change_password.old_password' | t }}</label>
                            <div class="form-group-icon">
                                <input class="form-control" type="password" name="old_password" id="old-password"/>
                                {% include 'icon-eye' %}
                            </div>
                            <div class="error-message" id="error-message" data-render="error-message" style="display: none"></div>
                        </div>
                        <div class="form-group">
                            <label for="new-password">{{ 'customer.account_change_password.new_password' | t }}</label>
                            <div class="form-group-icon">
                                <input class="form-control" type="password" name="password" id="new-password"
                                    data-account_email="{{ customer.email }}"
                                    data-member_id="{{ customer.metafields.data.personal.member_id }}"
                                    data-national_id="{{ customer.metafields.data.personal.national_id }}" />
                                {% include 'icon-eye' %}
                            </div>
                            <div class="form-note">{{ 'customer.account_change_password.example_password' | t }}</div>
                            <div class="password_msg hide">
                                <div class="title">{{ 'validator.password.requirements' | t }}</div>
                                <ul>
                                    <li class="pass_lower">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.contain_at_least_one_lower_case_letter' | t }}</span>
                                    </li>
                                    <li class="pass_capital">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.contain_at_least_one_capital_letter' | t }}</span>
                                    </li>
                                    <li class="pass_number">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.contain_at_least_one_number' | t }}</span>
                                    </li>
                                    <li class="pass_3_char">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.contain_multiple_identical_consecutive_characters' | t }}</span>
                                    </li>
                                    <li class="pass_account_name">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.not_be_the_same_as_the_account_name' | t }}</span>
                                    </li>
                                    <li class="pass_common">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.not_be_a_common_password' | t }}</span>
                                    </li>
                                    <li class="pass_minlength">
                                        <div class="group_icon">
                                            {% include 'icon-check_true' %}
                                            {% include 'icon-check_false' %}
                                        </div>
                                        <span>{{ 'validator.password.least_8_characters' | t }}</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="confirm-new-password">{{ 'customer.account_change_password.confirm_new_password' | t }}</label>
                            <div class="form-group-icon">
                                <input class="form-control" type="password" name="password_confirmation" id="confirm-new-password"
                                    data-msg-equalTo="{{ 'validator.password.confirmation' | t }}" />
                                {% include 'icon-eye' %}
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-actions group-buttons d-flex justify-content-end form__actions-sticky">
                    <button type="submit" class="btn btn-primary" id="btn-submit">
                        <span class="display-dk">{{ 'customer.account_change_password.confirm_password_change' | t }}</span>
                        <span class="display-mb">{{ 'general.form.confirm' | t }}</span>
                        <div class="loader"></div>
                    </button>
                    <a href="{{ pages['my-profile'].url }}" class="btn btn-cancel">{{ 'customer.account_change_password.cancel' | t }}</a>
                </div>
                
            </form>        
        </div>
    </div>

    <script type="text/javascript">

        function passwordValidate (value) {

            let passLower = $('.pass_lower'),
                passCapital = $('.pass_capital'),
                passNumber = $('.pass_number'),
                passChar = $('.pass_3_char'),
                passAccountName = $('.pass_account_name'),
                passMinlength = $('.pass_minlength'),
                passCommon = $('.pass_common'),
                classValid = 'valid';

            let sttLower = false,
                sttCapital = false,
                sttNumber = false,
                sttChar = true,
                sttAccountName = true,
                sttCommon = true,
                sttMinLength = false;

            // Check lowercase letters
            let lowerCaseLetters = /[a-z]/g;
            if(value.match(lowerCaseLetters)) {
                passLower.addClass(classValid);
                sttLower = true;
            } else {
                sttLower = false;
                passLower.removeClass(classValid);
            }

            // Check capital letters
            let upperCaseLetters = /[A-Z]/g;
            if(value.match(upperCaseLetters)) {
                passCapital.addClass(classValid);
                sttCapital = true;
            } else {
                sttCapital = false;
                passCapital.removeClass(classValid);
            }

            // Check number
            let numbers = /[0-9]/g;
            if(value.match(numbers)) {
                sttNumber = true;
                passNumber.addClass(classValid);
            } else {
                sttNumber = false;
                passNumber.removeClass(classValid);
            }

            // Check contain multiple identical consecutive characters. .match(/(.)\1\1+/g)
            let checkMultiChar = /(.)\1\1/.test(value);
            
            if (value.length == 0 || checkMultiChar) {
                sttChar = false;
                passChar.removeClass(classValid);
            }else {
                sttChar = true;
                passChar.addClass(classValid);
            }

            // Check not be the same as the account name
            let accountEmail = $('input[name="password"]').data('account_email'),
                accountMemberID = $('input[name="password"]').data('member_id'),
                accountNationalID = $('input[name="password"]').data('national_id'),
                accountInfoArr = [];

            if (accountEmail) {
                accountEmail = accountEmail.split('@')[0];
                accountInfoArr.push(accountEmail);
            }
            if (accountMemberID) {
                accountInfoArr.push(accountMemberID);
            }
            if (accountNationalID) {
                accountInfoArr.push(accountNationalID);
            }
            
            for (let i = 0; i < accountInfoArr.length; i++) {
                if (value.length == 0 || value.includes(accountInfoArr[i])) {
                    passAccountName.removeClass(classValid);
                    sttAccountName = false;
                    break;
                }else {
                    sttAccountName = true;
                    passAccountName.addClass(classValid);
                }
            }

            // Check be at least 8 characters
            if (value.length < 8) {
                sttMinLength = false;
                passMinlength.removeClass(classValid);
            }else {
                sttMinLength = true;
                passMinlength.addClass(classValid);
            }

            // Check common password
            let commonArr = ['123456','123456789','qwerty','password','1234567','12345678','12345','iloveyou','111111','123123',
                    'abc123','qwerty123','1q2w3e4r','admin','qwertyuiop','654321','555555','lovely','7777777','888888',
                    'princess','dragon','password1','123qwe','666666'];
            if (value.length == 0 || commonArr.includes(value)) {
                sttCommon = false;
                passCommon.removeClass(classValid);
            }else {
                sttCommon = true;
                passCommon.addClass(classValid);
            }
            

            if (sttLower && sttCapital && sttNumber && sttChar && sttAccountName) {
                return true;
            }else {
                return false;
            }

        }

        $(function () {

            let oldPwd  = $('input[name="old_password"]'),
                newPwd  = $('input[name="password"]'),
                formPwd = $('form[data-action="change-pwd"]'),
                passwordMsg  = $('.password_msg'),
                errMsg  = $('#error-message'),
                elButton = $('#btn-submit'),
                invalidPassword = {{ 'validator.password.incorrect_old' | t | json }};
                
            oldPwd.keyup(function (e) {
                errMsg.hide();
            });

            // Show & Hide password message
            newPwd.focus(function() {
                passwordMsg.removeClass('hide');
            });
            newPwd.blur(function() {
                passwordMsg.addClass('hide');
            });

            newPwd.keyup(function (e) {            
                let valueInput = newPwd.val();
                passwordValidate(valueInput);
            });


            formPwd.validate({
                rules: {
                    old_password: {
                        required: true,
                    },
                    password: {
                        required: true,
                        validatePassword: true,
                        minlength: 8,
                    },
                    password_confirmation: {
                        required: true,
                        equalTo: 'input[name="password"]',
                    }
                },
                submitHandler: function (form) {
                    errMsg.hide();
                    elButton.addClass('show-loading');
                    $('input[name="member_id"]').val('{{ customer_info.member_id }}');
                    $.ajax({
                        url: '{{ shop_url }}{{ shop.metafields.route.customer_change_password }}',
                        type: "POST",
                        accept: "application/json",
                        dataType: "json",
                        beforeSend: function (xhr, settings) {
                            xhr.setRequestHeader('Authorization', 'Bearer token')
                        },
                        data: formPwd.serialize(),
                        success: function (response) {
                            if (!response.error) {
                                // TODO: Message success
                                sessionStorage.setItem("change_password", 1);
                                location.href = "{{ pages['my-profile'].url }}";
                                elButton.removeClass('show-loading');
                            } else {
                                $('[data-render="error-message"]').text(response.message).show();
                                elButton.removeClass('show-loading');
                            }
                        },
                  		error: function (xhr, textStatus, errorThrown) {
                            errMsg.text(invalidPassword).show();
                            elButton.removeClass('show-loading');
                        }
                    });

                    // $.ajax({
                    //     url: "{{ shop_url }}{{ shop.metafields.route.customer_change_password }}",
                    //     crossDomain: true,
                    //     type: "POST",
                    //     accept: "application/json",
                    //     dataType: "json",
                    //     beforeSend: function (xhr, settings) {
                    //         xhr.setRequestHeader('Authorization', 'Bearer token')
                    //     },
                    //     data: {
                    //         'email': '{{ customer_info.member_id }}',
                    //         'password': oldPwd.val(),
                    //     },
                    //     success: function (response) {
                    //         $('input[name="member_id"]').val('{{ customer_info.member_id }}');
                    //         $.ajax({
                    //             url: '{{ shop_url }}{{ shop.metafields.route.customer_change_password }}',
                    //             type: "POST",
                    //             accept: "application/json",
                    //             dataType: "json",
                    //             data: formPwd.serialize(),
                    //             success: function (response) {
                    //                 if (!response.error) {
                    //                     // TODO: Message success
                    //                     sessionStorage.setItem("change_password", 1);
                    //                     location.href = "{{ pages['my-profile'].url }}";
                    //                     elButton.removeClass('show-loading');
                    //                 } else {
                    //                     $('[data-render="error-message"]').text(response.message).show();
                    //                     elButton.removeClass('show-loading');
                    //                 }
                    //             }
                    //         });
                    //         return false;
                    //     },
                    //     error: function (xhr, textStatus, errorThrown) {
                    //         errMsg.text(invalidPassword).show();
                    //         elButton.removeClass('show-loading');
                    //     }
                    // });
                }
            });

            $.validator.addMethod('validatePassword', function (value, element) {
                let sttInput = passwordValidate(value);
                return sttInput;
            }, 'Invalid Password');
        });
    </script>
{% else %}
    <script>
        document.location.href="{{ routes.root_url }}";
    </script>
{% endif %}